@inherits LayoutComponentBase

<MudThemeProvider @ref="@MudThemeProvider" Theme="@Theme" DefaultScrollbar="true" @bind-IsDarkMode="@isDarkMode" />
<MudDialogProvider />
<MudSnackbarProvider />

<style>
	strong {
		color: @Theme.Palette.Primary;
	}
</style>

<CascadingValue Value="this" Name="Layout">
	<div class="page">
		<MudAppBar Elevation="0">
			<span class="logo-circle pa-4">
				<MudLink Href=""><MudImage Src="images/WillSullDev_Logo.png" Alt="Logo" Height="48" /></MudLink>
			</span>
			<MudSpacer />
			<TopLinks @ref="TopBarLinks" NavLinks="@NavLinks" />
		</MudAppBar>
		<MudMainContent>
			<div class="hero">
				@Hero
			</div>

			@* This feels like a hacky fix to create space for the Hero. But I can't find a better way right now.*@
			<div class="hero-space">
				@Hero
			</div>

			<div class="cover rounded-t-xl">
				<article>
					@Body
				</article>
			</div>

			<MudAppBar Elevation="0" Bottom="true" Fixed="false" Class="pb-2">
				<MudLink Href=""><MudImage Class="mt-4 mx-4" Src="images/WillSullDev_Logo.png" Alt="Logo" Height="48" /></MudLink>
			</MudAppBar>
		</MudMainContent>
	</div>
</CascadingValue>

@code
{
	private List<NavLinkDetails> NavLinks = new() {
		new("", "HOME"),
		new("about", "ABOUT"),
		new("projects", "PROJECTS"),
		new("contact", "CONTACT") };

	private TopLinks? TopBarLinks;

	private bool isDarkMode;
	private MudThemeProvider MudThemeProvider = null!;

	private RenderFragment? Hero { get; set; }

	MudTheme Theme = new MudTheme()
		{
			Palette = new PaletteLight()
			{
				Primary = new("7743DB"),
				Secondary = Colors.Green.Accent4,
				AppbarBackground = Colors.Red.Default,
			},
			PaletteDark = new PaletteDark()
			{
				Primary = Colors.Blue.Lighten1
			}
		};

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			isDarkMode = await MudThemeProvider.GetSystemPreference();
			await MudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
			StateHasChanged();
		}
	}

	private Task OnSystemPreferenceChanged(bool newValue)
	{
		isDarkMode = newValue;
		StateHasChanged();
		return Task.CompletedTask;
	}

	public void SetHero(RenderFragment? hero)
	{
		Hero = hero;
		StateHasChanged();
	}
}
