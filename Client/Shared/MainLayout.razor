@inherits LayoutComponentBase

<MudThemeProvider Theme="@Theme"/>
<MudDialogProvider />
<MudSnackbarProvider />

<style>
	strong {
		color: @Theme.Palette.Primary;
	}
</style>

<CascadingValue Value="this" Name="Layout">
	<div class="page" @onclick="PageClicked">
		<div class="top-row">
			<span class="logo-circle">
				<a href=""><img class="logo" alt="Logo" src="images/WillSullDev_Logo.png" /></a>
			</span>
			<TopLinks @ref="TopBarLinks" NavLinks="@NavLinks" />
		</div>
		<div class="top-row-space">
		</div>
		<main>
			<div class="hero">
				@Hero
			</div>

			@* This feels like a hacky fix to create space for the Hero. But I can't find a better way right now.*@
			<div class="hero-space">
				@Hero
			</div>

			<div class="cover rounded">
				<article>
					@Body
				</article>
			</div>
		</main>

		<div class="footer">
			<a href=""><img class="logo" alt="Logo" src="images/WillSullDev_Logo.png" /></a>
		</div>
	</div>
</CascadingValue>

@code
{
	private List<NavLinkDetails> NavLinks = new() {
		new("", "HOME", true),
		new("about", "ABOUT"),
		new("projects", "PROJECTS"),
		new("contact", "CONTACT") };

	private TopLinks? TopBarLinks;

	private RenderFragment? Hero { get; set; }

	MudTheme Theme = new MudTheme()
		{
			Palette = new PaletteLight()
			{
				Primary = new("7743DB"),
				Secondary = Colors.Green.Accent4,
				AppbarBackground = Colors.Red.Default,
			},
			PaletteDark = new PaletteDark()
			{
				Primary = Colors.Blue.Lighten1
			}
		};

	private void PageClicked()
	{
		TopBarLinks?.HideMenu();
	}

	public void SetHero(RenderFragment? hero)
	{
		Hero = hero;
		StateHasChanged();
	}
}
