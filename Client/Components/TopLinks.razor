@inject IJSRuntime JSRuntime

<script>
	function scrollToId(id) {
		const element = document.getElementById(id);
		if (element instanceof HTMLElement) {
			element.scrollIntoView({
				behavior: "smooth",
				block: "start",
				inline: "nearest"
			});
		}
	}
</script>

<MudHidden Breakpoint="Breakpoint.SmAndDown">
	@foreach (var detail in LinkEnumerable)
	{
		@if (detail.HRef.StartsWith("#"))
		{
			<MudButton Size="Size.Large" OnClick="@(() =>ScrollTo(detail.HRef))" Color="Color.Inherit">
				@detail.Content
			</MudButton>
		}
		else
		{
			<MudButton Size="Size.Large" Href="@detail.HRef" Color="Color.Inherit">
				@detail.Content
			</MudButton>
		}
	}
</MudHidden>

<MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
	<MudMenu Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
		<div class="my-n2 py-2" style="background-color: @Palette.AppbarBackground; color: @Palette.AppbarText">
			@foreach (var detail in LinkEnumerable)
			{
				@if (detail.HRef.StartsWith("#"))
				{
					<MudMenuItem OnClick="@(() =>ScrollTo(detail.HRef))" OnTouch="@(() =>ScrollTo(detail.HRef))">
						@detail.Content
					</MudMenuItem>
				}
				else
				{
					<MudMenuItem Href="@detail.HRef">
						@detail.Content
					</MudMenuItem>
				}
			}
		</div>
	</MudMenu>
</MudHidden>

@code {
	[Parameter, EditorRequired]
	public List<LinkDetails>? Links { get; set; }

	private IEnumerable<LinkDetails> LinkEnumerable => Links ?? Enumerable.Empty<LinkDetails>();

	[CascadingParameter]
	protected MudThemeProvider? MudThemeProvider { get; set; }

#pragma warning disable CS0618
	private Palette Palette
	{
		get
		{
			if (MudThemeProvider?.IsDarkMode ?? false)
				return MudThemeProvider.Theme?.PaletteDark ?? new PaletteDark();
			else
				return MudThemeProvider?.Theme?.Palette ?? new PaletteLight();
		}
	}
#pragma warning restore CS0618

	private void ScrollTo(string href)
	{
		var elementId = href.Substring(1);
		if (string.IsNullOrEmpty(elementId))
		{
			elementId = "app";
		}
		JSRuntime.InvokeVoidAsync("scrollToId", elementId);
	}
}
