<div class="hero">
	<div class="fill-100" style="grid-column: 1; grid-row: 1;">
		<div class="skew-20 height-100">
			<div class="back-colors">
				<div class="fill-100" style="grid-column: 3; grid-row: 1; background-color: @(Palette.Secondary)" />
				<div class="fill-100" style="grid-column: 4; grid-row: 1;" />
				<div class="fill-100" style="grid-column: 5; grid-row: 1; background-color: @(Palette.Secondary)" />
			</div>
		</div>
	</div>
	<div class="@(bufferClass)" style="grid-column: 1; grid-row: 1; z-index: 1;">
		@ChildContent
	</div>
</div>

@code {
	[Parameter]
	public bool Large { get; set; } = true;
	private string bufferClass => Large ? "buffer-large" : "buffer-small";

	[Parameter]
	public RenderFragment? ChildContent { get; set; }

	[CascadingParameter]
	protected MudThemeProvider? MudThemeProvider { get; set; }

#pragma warning disable CS0618
	private Palette Palette
	{
		get
		{
			if (MudThemeProvider?.IsDarkMode ?? false)
				return MudThemeProvider.Theme?.PaletteDark ?? new PaletteDark();
			else
				return MudThemeProvider?.Theme?.Palette ?? new PaletteLight();
		}
	}
#pragma warning restore CS0618
}
