<div class="hero">
	<div class="skew-position fill grid-c-1 grid-r-1">
		<div class="backColors">
			<div class="fill grid-c-1 grid-r-1" style="background-color: @(Palette.Secondary)" />
			<div class="fill grid-c-2 grid-r-1" />
			<div class="fill grid-c-3 grid-r-1" style="background-color: @(Palette.Secondary)" />
		</div>
	</div>
	<div class="grid-c-1 grid-r-1 px-6 @(bufferClass)" style="z-index: 1;">
		@ChildContent
	</div>
</div>

@code {
	[Parameter]
	public bool Large { get; set; } = true;
	private string bufferClass => Large ? "buffer-large" : "buffer-small";

	[Parameter]
	public RenderFragment? ChildContent { get; set; }

	[CascadingParameter]
	protected MudThemeProvider? MudThemeProvider { get; set; }

#pragma warning disable CS0618
	private Palette Palette
	{
		get
		{
			if (MudThemeProvider?.IsDarkMode ?? false)
				return MudThemeProvider.Theme?.PaletteDark ?? new PaletteDark();
			else
				return MudThemeProvider?.Theme?.Palette ?? new PaletteLight();
		}
	}
#pragma warning restore CS0618
}
